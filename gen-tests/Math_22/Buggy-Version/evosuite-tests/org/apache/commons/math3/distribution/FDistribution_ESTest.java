/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 05 01:31:31 GMT 2024
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.6194060107318045, 16);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(2.823662854314815, double0, 0.01);
      assertEquals(1.1428571428571428, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.1076716069929933E-95, 2.1076716069929933E-95, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(fDistribution0.isSupportConnected());
      assertEquals(2.1076716069929933E-95, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.2804663992781056E16, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(2.1076716069929933E-95, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well19937a well19937a0 = new Well19937a(intArray0);
      FDistribution fDistribution0 = new FDistribution(well19937a0, 489.0, 16, 0.0);
      double double0 = fDistribution0.density(0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(489.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.1428571428571428, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(325.217897833, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 0.5, 0.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0, 1.0);
      boolean boolean0 = fDistribution0.isSupportConnected();
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(398.03160386, 398.03160386);
      double double0 = fDistribution0.getSupportUpperBound();
      assertEquals(398.03160386, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(398.03160386, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1075, 1075, 1075);
      double double0 = fDistribution0.getSupportLowerBound();
      assertEquals(1075.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0018639328984156, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.1076716069929933E-95, 2.1076716069929933E-95, 0.0);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(2.1076716069929933E-95, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(2.1076716069929933E-95, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(398.03160386, 398.03160386);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(1.0050501020133409, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0E-9, double0, 0.01);
      assertEquals(398.03160386, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN, (-422.4));
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals((-422.4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(936L);
      FDistribution fDistribution0 = new FDistribution(mersenneTwister0, 936L, 936L, 0.0);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(0.004305640704191778, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(398.03160386, 398.03160386);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(398.03160386, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0050501020133409, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1853.3725671221896, 1853.3725671221896);
      double double0 = fDistribution0.density(1853.3725671221896);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1724, 1724);
      double double0 = fDistribution0.cumulativeProbability((-915.82378));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1724.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1724.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.1076716069929933E-95, 2.1076716069929933E-95, 0.0);
      double double0 = fDistribution0.cumulativeProbability(2.1076716069929933E-95);
      assertEquals(0.49999999999999906, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1724, 1724);
      double double0 = fDistribution0.calculateNumericalVariance();
      assertEquals(0.002329634499419531, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well512a0, (-1794.87820296893), (-1794.87820296893), (-1794.87820296893));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,794.878)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.013013291816711351, 0.013013291816711351);
      double double0 = fDistribution0.getNumeratorDegreesOfFreedom();
      assertEquals(0.013013291816711351, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.013013291816711351, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2406.3836, 2406.3836, 0.0);
      double double0 = fDistribution0.getDenominatorDegreesOfFreedom();
      assertEquals(2406.3836, double0, 0.01);
      assertEquals(2406.3836, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.2804663992760828E16, 2.0, 1513.32973);
      // Undeclared exception!
      fDistribution0.sample(1317);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(3360.118631585004, (-3125.3560213226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-3,125.356)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0, 1.0);
      double double0 = fDistribution0.density(1.0);
      assertEquals(0.15915494309189535, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN, (-422.4));
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1075, 1075);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(1075.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(1075.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }
}
