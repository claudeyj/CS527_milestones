/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 05 01:36:25 GMT 2024
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 0.0);
      // Undeclared exception!
      fDistribution0.sample(291);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      FDistribution fDistribution0 = new FDistribution(well1024a0, 1028.41, 1372.36165556577, 1028.41);
      fDistribution0.density((-3484.9));
      assertEquals(1372.36165556577, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1028.41, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(1301.54075588, (-291.912245655541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-291.912)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 1.5263078212738037);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      FDistribution fDistribution0 = new FDistribution(well1024a0, 1028.41, 1372.36165556577, 1028.41);
      boolean boolean0 = fDistribution0.isSupportConnected();
      assertEquals(1028.41, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0014594687408809, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1561.697765043855, 609.7812288);
      double double0 = fDistribution0.getSupportUpperBound();
      assertEquals(1561.697765043855, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(609.7812288, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(937.553835016889, 1545.2985615, 1545.2985615);
      double double0 = fDistribution0.getSupportLowerBound();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1545.2985615, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(937.553835016889, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2233.06, 0.5, 0.0);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(2233.06, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1561.697765043855, 609.7812288);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(1.0E-9, double0, 0.01);
      assertEquals(1561.697765043855, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0032906577321397, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(448.70390323061514, 448.70390323061514);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(0.009055246635432074, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(937.553835016889, 1545.2985615, 1545.2985615);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(1.0012959255259437, double0, 0.01);
      assertEquals(937.553835016889, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      FDistribution fDistribution0 = new FDistribution(well512a0, 0.5, 0.5, 242.35);
      double double0 = fDistribution0.density(0.5);
      assertEquals(0.18515679448477712, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2233.06, 0.5, 0.0);
      double double0 = fDistribution0.cumulativeProbability((-2555.26035));
      assertEquals(2233.06, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1561.697765043855, 609.7812288);
      double double0 = fDistribution0.cumulativeProbability(609.7812288);
      assertEquals(1561.697765043855, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(609.7812288, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      FDistribution fDistribution0 = new FDistribution(well1024a0, 1028.41, 1372.36165556577, 1028.41);
      double double0 = fDistribution0.calculateNumericalVariance();
      assertEquals(0.0034191525010207487, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well512a0, 0.0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      FDistribution fDistribution0 = new FDistribution(well1024a0, 1028.41, 1372.36165556577, 1028.41);
      double double0 = fDistribution0.getNumeratorDegreesOfFreedom();
      assertEquals(1028.41, double0, 0.01);
      assertEquals(1.0014594687408809, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      FDistribution fDistribution0 = new FDistribution(well1024a0, 1028.41, 1372.36165556577, 1028.41);
      double double0 = fDistribution0.getDenominatorDegreesOfFreedom();
      assertEquals(1372.36165556577, double0, 0.01);
      assertEquals(1028.41, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.0, 4.0, 0.9687825808003);
      // Undeclared exception!
      fDistribution0.sample(786);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.POSITIVE_INFINITY, 0.5136259187016542);
      // Undeclared exception!
      try { 
        fDistribution0.inverseCumulativeProbability(7.01199184127881E-8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0, \uFFFD]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(1.5263078212738037, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-631.773342), (-631.773342), (-631.773342));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-631.773)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      FDistribution fDistribution0 = new FDistribution(well1024a0, 1028.41, 1372.36165556577, 1028.41);
      double double0 = fDistribution0.density(1372.36165556577);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0014594687408809, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2233.06, 0.5, 0.0);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(2233.06, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      FDistribution fDistribution0 = new FDistribution(well512a0, 6007.56, 1658.1209803, 1658.1209803);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(6007.56, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(1658.1209803, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }
}
