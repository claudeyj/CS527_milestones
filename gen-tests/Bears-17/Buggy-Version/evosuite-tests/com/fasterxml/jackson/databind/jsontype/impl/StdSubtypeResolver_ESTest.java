/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 05 04:01:43 GMT 2024
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StdSubtypeResolver_ESTest extends StdSubtypeResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      // Undeclared exception!
      try { 
        stdSubtypeResolver0.registerSubtypes((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      // Undeclared exception!
      try { 
        stdSubtypeResolver0.registerSubtypes((NamedType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      NamedType[] namedTypeArray0 = new NamedType[1];
      stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
      assertEquals(1, namedTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<NamedType>[] classArray0 = (Class<NamedType>[]) Array.newInstance(Class.class, 5);
      Class<NamedType> class0 = NamedType.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = classArray0[1];
      classArray0[3] = classArray0[2];
      classArray0[4] = class0;
      stdSubtypeResolver0.registerSubtypes(classArray0);
      NamedType[] namedTypeArray0 = new NamedType[2];
      stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
      assertEquals(2, namedTypeArray0.length);
  }
}
