/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Jun 03 04:16:37 GMT 2024
 */

package io.github.classgraph;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class ClassGraph_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "io.github.classgraph.ClassGraph"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.OFF; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ClassGraph_ESTest_scaffolding.class.getClassLoader() ,
      "io.github.classgraph.ClassGraph",
      "io.github.classgraph.utils.WhiteBlackList",
      "io.github.classgraph.utils.VersionFinder$OperatingSystem",
      "io.github.classgraph.utils.FileUtils$2",
      "io.github.classgraph.utils.FileUtils$1",
      "io.github.classgraph.utils.FastPathResolver",
      "io.github.classgraph.ClassGraph$ClasspathElementFilter",
      "io.github.classgraph.utils.WhiteBlackList$WhiteBlackListWholeString",
      "io.github.classgraph.utils.WorkQueue$WorkUnitProcessor",
      "io.github.classgraph.ClassGraph$FailureHandler",
      "io.github.classgraph.utils.LogNode",
      "io.github.classgraph.utils.SimpleThreadFactory",
      "io.github.classgraph.utils.VersionFinder",
      "io.github.classgraph.utils.JarUtils",
      "io.github.classgraph.Scanner",
      "io.github.classgraph.ClassGraph$ScanResultProcessor",
      "io.github.classgraph.utils.FileUtils",
      "io.github.classgraph.utils.WhiteBlackList$WhiteBlackListPrefix",
      "io.github.classgraph.ScanResult",
      "io.github.classgraph.ScanSpec",
      "io.github.classgraph.utils.WhiteBlackList$WhiteBlackListLeafname",
      "io.github.classgraph.utils.InterruptionChecker"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("io.github.classgraph.ClassGraph$ClasspathElementFilter", false, ClassGraph_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("io.github.classgraph.ClassGraph$FailureHandler", false, ClassGraph_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("io.github.classgraph.ClassGraph$ScanResultProcessor", false, ClassGraph_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ClassGraph_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "io.github.classgraph.ClassGraph",
      "io.github.classgraph.utils.VersionFinder$OperatingSystem",
      "io.github.classgraph.utils.VersionFinder",
      "io.github.classgraph.utils.FastPathResolver",
      "io.github.classgraph.utils.FileUtils$2",
      "io.github.classgraph.utils.FileUtils",
      "io.github.classgraph.utils.JarUtils",
      "io.github.classgraph.ScanSpec",
      "io.github.classgraph.utils.WhiteBlackList",
      "io.github.classgraph.utils.WhiteBlackList$WhiteBlackListWholeString",
      "io.github.classgraph.utils.WhiteBlackList$WhiteBlackListPrefix",
      "io.github.classgraph.utils.WhiteBlackList$WhiteBlackListLeafname",
      "io.github.classgraph.utils.AutoCloseableExecutorService",
      "io.github.classgraph.utils.SimpleThreadFactory",
      "io.github.classgraph.Scanner",
      "io.github.classgraph.utils.InterruptionChecker",
      "io.github.classgraph.ModuleRef",
      "io.github.classgraph.utils.ReflectionUtils",
      "io.github.classgraph.utils.LogNode"
    );
  }
}
