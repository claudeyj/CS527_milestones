/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 04:16:37 GMT 2024
 */

package io.github.classgraph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.classgraph.ClassGraph;
import io.github.classgraph.utils.SimpleThreadFactory;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClassGraph_ESTest extends ClassGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      // Undeclared exception!
      try { 
        classGraph0.whitelistModules((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      // Undeclared exception!
      try { 
        classGraph0.overrideClasspath((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.utils.JarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassLoader[] classLoaderArray0 = new ClassLoader[0];
      // Undeclared exception!
      try { 
        classGraph0.overrideClassLoaders(classLoaderArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least one override ClassLoader must be provided
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SunJavalib";
      stringArray0[1] = "";
      stringArray0[2] = "zVl Dt1E$O*[!3";
      // Undeclared exception!
      try { 
        classGraph0.blacklistModules(stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // ^zVl Dt1E$O.*[!3$
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreFieldVisibility();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableFieldInfo();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreClassVisibility();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableAnnotationInfo();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreMethodVisibility();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ClassGraph.FailureHandler classGraph_FailureHandler0 = mock(ClassGraph.FailureHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        classGraph0.scanAsync((ExecutorService) forkJoinPool0, (-183), (ClassGraph.ScanResultProcessor) null, classGraph_FailureHandler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // scanResultProcessor cannot be null
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      SimpleThreadFactory simpleThreadFactory0 = new SimpleThreadFactory("SxQx!)x^CAa]RXi", true);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, simpleThreadFactory0);
      ClassGraph.ScanResultProcessor classGraph_ScanResultProcessor0 = mock(ClassGraph.ScanResultProcessor.class, new ViolatedAssumptionAnswer());
      ClassGraph.FailureHandler classGraph_FailureHandler0 = mock(ClassGraph.FailureHandler.class, new ViolatedAssumptionAnswer());
      classGraph0.scanAsync((ExecutorService) scheduledThreadPoolExecutor0, 1, classGraph_ScanResultProcessor0, classGraph_FailureHandler0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Could not find lib or ext jar matching wildcard: ";
      stringArray0[3] = "";
      ClassGraph classGraph1 = classGraph0.blacklistModules(stringArray0);
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4.4.13-SNAPSHOT";
      stringArray0[1] = "4.4.13-SNAPSHOT";
      stringArray0[2] = "4.4.13-SNAPSHOT";
      stringArray0[3] = "4.4.13-SNAPSHOT";
      stringArray0[4] = "4.4.13-SNAPSHOT";
      stringArray0[5] = "4.4.13-SNAPSHOT";
      stringArray0[6] = "4.4.13-SNAPSHOT";
      stringArray0[7] = "4.4.13-SNAPSHOT";
      stringArray0[8] = "4.4.13-SNAPSHOT";
      ClassGraph classGraph1 = classGraph0.whitelistModules(stringArray0);
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "io.github.classgraph.ModuleInfo";
      ClassGraph classGraph1 = classGraph0.blacklistLibOrExtJars(stringArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "*";
      ClassGraph classGraph1 = classGraph0.whitelistLibOrExtJars(stringArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        classGraph0.blacklistJars(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.utils.JarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[0];
      ClassGraph classGraph1 = classGraph0.blacklistJars(stringArray0);
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "shaded.org.apache.commons.io.filefilter.SizeFileFilter";
      stringArray0[1] = "!";
      // Undeclared exception!
      try { 
        classGraph0.whitelistJars(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only whitelist jars by leafname: !
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[0];
      ClassGraph classGraph1 = classGraph0.whitelistJars(stringArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*";
      // Undeclared exception!
      try { 
        classGraph0.blacklistClasses(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use a glob wildcard here: *
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "io.github.classgraph.ModuleInfo";
      ClassGraph classGraph1 = classGraph0.blacklistClasses(stringArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The wildcard array must not be null";
      stringArray0[1] = "J9k:m5+33Pd";
      stringArray0[2] = "Thread interrupted while getting classpath elements";
      stringArray0[3] = " ; ";
      stringArray0[4] = "{J}5AGC]?";
      stringArray0[5] = "";
      stringArray0[6] = "Thread interrupted while getting modules";
      stringArray0[7] = "ZCT$X`a6*:HO1@oit.~";
      // Undeclared exception!
      try { 
        classGraph0.whitelistClasses(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use a glob wildcard here: ZCT$X`a6*:HO1@oit.~
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "xcA";
      stringArray0[2] = "";
      stringArray0[3] = "Thread interrupted while getting classpath elements";
      stringArray0[4] = "io.github.classgraph.utils.NestedJarHandler";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "scanResultProcessor cannot be null";
      stringArray0[8] = "";
      ClassGraph classGraph1 = classGraph0.whitelistClasses(stringArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        classGraph0.blacklistPaths(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.utils.WhiteBlackList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[0];
      ClassGraph classGraph1 = classGraph0.blacklistPaths(stringArray0);
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Class is not an interface: ";
      stringArray0[1] = "|f5B[+}1,Qg%?Qhqm1(";
      stringArray0[2] = "$EtD=Iq x6qkcVWuN";
      stringArray0[3] = "";
      stringArray0[4] = "hh~SX";
      ClassGraph classGraph1 = classGraph0.blacklistPackages(stringArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "unknown";
      stringArray0[1] = "qJ`])0Wi5~.b)~";
      stringArray0[2] = "";
      stringArray0[3] = "R!>)&XH~8G,gU~kL";
      stringArray0[4] = "";
      stringArray0[5] = "-";
      stringArray0[6] = "{;\"S^;P07VEq";
      stringArray0[7] = ".";
      ClassGraph classGraph1 = classGraph0.whitelistPathsNonRecursive(stringArray0);
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "xcA";
      stringArray0[2] = "";
      stringArray0[3] = "Thread interrupted while getting classpath elements";
      stringArray0[4] = "io.github.classgraph.utils.NestedJarHandler";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "scanResultProcessor cannot be null";
      stringArray0[8] = "";
      ClassGraph classGraph1 = classGraph0.whitelistPackagesNonRecursive(stringArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-}zz#^N A~~~q4Va";
      // Undeclared exception!
      try { 
        classGraph0.whitelistPaths(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.utils.WhiteBlackList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[0];
      ClassGraph classGraph1 = classGraph0.whitelistPaths(stringArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"s*H";
      // Undeclared exception!
      try { 
        classGraph0.whitelistPackages(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "io.github.classgraph.ModuleInfo";
      ClassGraph classGraph1 = classGraph0.whitelistPackages(stringArray0);
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        classGraph0.overrideClasspath(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't override classpath with an empty path
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) classGraph0;
      objectArray0[1] = (Object) classGraph0;
      objectArray0[2] = (Object) classLoader0;
      objectArray0[3] = (Object) classGraph0;
      objectArray0[4] = (Object) classLoader0;
      objectArray0[5] = (Object) classGraph0;
      ClassGraph classGraph1 = classGraph0.overrideClasspath(objectArray0);
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        classGraph0.overrideClasspath((Iterable<?>) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't override classpath with an empty path
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.verbose();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableDirScanning();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph.ClasspathElementFilter classGraph_ClasspathElementFilter0 = mock(ClassGraph.ClasspathElementFilter.class, new ViolatedAssumptionAnswer());
      ClassGraph classGraph1 = classGraph0.filterClasspathElements(classGraph_ClasspathElementFilter0);
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.overrideClasspath("Vd-I%");
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableJarScanning();
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.stripZipSFXHeaders();
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableRuntimeInvisibleAnnotations();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.removeTemporaryFilesAfterScan();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.initializeLoadedClasses();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableAllInfo();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableMethodInfo();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      // Undeclared exception!
      try { 
        classGraph0.addModuleLayer(classGraph0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableSystemPackages();
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableExternalClasses();
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassGraph classGraph1 = classGraph0.addClassLoader(classLoader0);
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        classGraph0.overrideModuleLayers(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ModuleLayer references must not be null
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreParentClassLoaders();
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreParentModuleLayers();
      assertSame(classGraph1, classGraph0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableModuleScanning();
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableStaticFinalFieldConstantInitializerValues();
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassLoader[] classLoaderArray0 = new ClassLoader[3];
      ClassGraph classGraph1 = classGraph0.overrideClassLoaders(classLoaderArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = ClassGraph.getVersion();
      assertEquals("4.4.13-SNAPSHOT", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableNestedJarScanning();
      assertSame(classGraph0, classGraph1);
  }
}
