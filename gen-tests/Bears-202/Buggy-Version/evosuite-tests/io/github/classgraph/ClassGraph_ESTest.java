/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 04:11:43 GMT 2024
 */

package io.github.classgraph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.classgraph.ClassGraph;
import io.github.classgraph.ModuleRef;
import java.util.ArrayList;
import java.util.ServiceLoader;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinTask;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClassGraph_ESTest extends ClassGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[5];
      String string0 = "W2g~";
      stringArray0[0] = "W2g~";
      stringArray0[1] = "kl6FyBsK>{6p3,2o";
      stringArray0[2] = "yWxQ*SEsd";
      stringArray0[3] = "This style of whitelisting/blacklisting is no longer supported: ";
      stringArray0[4] = "yc9$Ewo.=6";
      // Undeclared exception!
      try { 
        classGraph0.whitelistPathsNonRecursive(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use a glob wildcard here: yWxQ*SEsd
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableClassInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Please call ClassGraph#enableFieldInfo() before #scan()";
      ClassGraph classGraph2 = classGraph1.whitelistClasses(stringArray0);
      ClassGraph classGraph3 = classGraph2.ignoreMethodVisibility();
      ClassGraph classGraph4 = classGraph3.blacklistLibOrExtJars(stringArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classGraph4.addModuleLayer(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableRuntimeInvisibleAnnotations();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "lM@Zh8YY7'6g`_hv";
      stringArray0[1] = "Xt21A;eOg";
      stringArray0[2] = "";
      stringArray0[3] = "(P'Wd@H7iks1<${s";
      ClassGraph classGraph2 = classGraph1.blacklistPackages(stringArray0);
      ClassGraph classGraph3 = classGraph2.whitelistClasses(stringArray0);
      ClassGraph classGraph4 = classGraph3.enableSystemPackages();
      ClassGraph classGraph5 = classGraph4.stripZipSFXHeaders();
      ClassGraph classGraph6 = classGraph5.initializeLoadedClasses();
      assertSame(classGraph6, classGraph2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableNestedJarScanning();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "KbB+^E8t_$vh`g";
      stringArray0[4] = ":&Ji:uoD`<5FL";
      stringArray0[5] = "fsA0O-NzY";
      stringArray0[6] = "JSON is not in correct format";
      ClassGraph classGraph2 = classGraph1.blacklistJars(stringArray0);
      ClassGraph classGraph3 = classGraph2.ignoreFieldVisibility();
      // Undeclared exception!
      try { 
        classGraph3.addModuleLayer("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Exception while getting modules";
      stringArray0[1] = "J7Kl|8ueD";
      stringArray0[2] = "";
      stringArray0[3] = "uURG6Dy~E_m$?@v$,$:";
      stringArray0[4] = "$-d z0 6{x9D5zF#j )";
      stringArray0[5] = "Blacklisting lib or ext jar: ";
      stringArray0[6] = "$e^]@'l-*^RvrnpFmVi";
      stringArray0[7] = "dDgB|%Q(z{]";
      stringArray0[8] = "";
      classGraph0.blacklistPaths(stringArray0);
      ModuleRef moduleRef0 = null;
      try {
        moduleRef0 = new ModuleRef("uURG6Dy~E_m$?@v$,$:", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method \"descriptor\" doesn't exist
         //
         verifyException("io.github.classgraph.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.initializeLoadedClasses();
      assertSame(classGraph1, classGraph0);
      
      String[] stringArray0 = new String[0];
      ClassGraph classGraph2 = classGraph1.blacklistModules(stringArray0);
      // Undeclared exception!
      try { 
        classGraph2.overrideModuleLayers(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least one override ModuleLayer must be provided
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.initializeLoadedClasses();
      ClassGraph classGraph2 = classGraph1.removeTemporaryFilesAfterScan();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "S4/L:L!i{EwVxV";
      stringArray0[3] = "io.github.classgraph.ClassGraph";
      stringArray0[4] = "w.m8/x`ONg1i";
      stringArray0[5] = "This style of whitelisting/blacklisting is no longer supported: ";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "\"n q`MB.$ .N!On";
      ClassGraph classGraph3 = classGraph2.blacklistPackages(stringArray0);
      ClassGraph classGraph4 = classGraph3.ignoreParentModuleLayers();
      ClassGraph classGraph5 = classGraph4.disableRuntimeInvisibleAnnotations();
      // Undeclared exception!
      try { 
        classGraph5.addModuleLayer("\"n q`MB.$ .N!On");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreClassVisibility();
      ClassGraph classGraph2 = classGraph1.stripZipSFXHeaders();
      ClassGraph classGraph3 = classGraph2.enableExternalClasses();
      ClassGraph classGraph4 = classGraph3.ignoreFieldVisibility();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) classGraph2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) classGraph4;
      // Undeclared exception!
      try { 
        classGraph4.overrideModuleLayers(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.stripZipSFXHeaders();
      ClassGraph classGraph2 = classGraph1.disableJarScanning();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+x^g2gGI<-oAGh";
      stringArray0[1] = ",3ggC;U!SD'0_@";
      ClassGraph classGraph3 = classGraph2.whitelistPackagesNonRecursive(stringArray0);
      ClassGraph classGraph4 = classGraph3.verbose();
      ClassGraph classGraph5 = classGraph4.blacklistPaths(stringArray0);
      // Undeclared exception!
      try { 
        classGraph5.blacklistLibOrExtJars(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only blacklist jars by leafname: ,3ggC;U!SD'0_@
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) classGraph0;
      objectArray0[1] = (Object) classGraph0;
      objectArray0[2] = (Object) classGraph0;
      objectArray0[3] = (Object) classGraph0;
      ClassGraph classGraph1 = classGraph0.overrideClasspath(objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Could not call moduleReader.open(name).get()";
      stringArray0[1] = "";
      ClassGraph classGraph2 = classGraph1.whitelistPaths(stringArray0);
      ClassGraph classGraph3 = classGraph2.enableClassInfo();
      assertSame(classGraph3, classGraph0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        classGraph0.blacklistJars((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " /[~XFpAGb5;6jB";
      stringArray0[1] = "wBI,<NDW";
      stringArray0[2] = "";
      stringArray0[3] = "This style of whitelisting/blacklisting is no longer supported: ";
      ClassGraph classGraph1 = classGraph0.whitelistPackages(stringArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGraph classGraph2 = classGraph1.addClassLoader(classLoader0);
      ClassGraph classGraph3 = classGraph2.disableRuntimeInvisibleAnnotations();
      ClassGraph classGraph4 = classGraph3.ignoreParentModuleLayers();
      ClassGraph classGraph5 = classGraph4.blacklistPackages(stringArray0);
      // Undeclared exception!
      try { 
        classGraph5.whitelistJars(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only whitelist jars by leafname:  /[~XFpAGb5;6jB
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph.ClasspathElementFilter classGraph_ClasspathElementFilter0 = mock(ClassGraph.ClasspathElementFilter.class, new ViolatedAssumptionAnswer());
      ClassGraph classGraph1 = classGraph0.filterClasspathElements(classGraph_ClasspathElementFilter0);
      ClassGraph classGraph2 = classGraph1.disableRuntimeInvisibleAnnotations();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5wr ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "BuXRpw}lx?tI2";
      stringArray0[4] = "The size must be non-negative";
      stringArray0[5] = "2.Lq";
      ClassGraph classGraph3 = classGraph2.blacklistClasses(stringArray0);
      ClassGraph classGraph4 = classGraph3.initializeLoadedClasses();
      ClassGraph classGraph5 = classGraph4.disableModuleScanning();
      ClassGraph classGraph6 = classGraph5.blacklistPackages(stringArray0);
      assertSame(classGraph6, classGraph2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreClassVisibility();
      ClassGraph classGraph2 = classGraph1.overrideClasspath("O7[Qua%_:EXt#");
      ClassGraph classGraph3 = classGraph2.enableAllInfo();
      ClassGraph classGraph4 = classGraph3.ignoreMethodVisibility();
      // Undeclared exception!
      try { 
        classGraph4.whitelistPaths((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableSystemPackages();
      classGraph1.disableNestedJarScanning();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "io.github.classgraph.InfoList";
      stringArray0[1] = "";
      String string0 = " / ";
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        classGraph0.scan((ExecutorService) null, (-687));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableMethodInfo();
      ClassGraph classGraph2 = classGraph1.ignoreClassVisibility();
      ClassGraph classGraph3 = classGraph2.enableSystemPackages();
      ClassGraph classGraph4 = classGraph3.enableFieldInfo();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      // Undeclared exception!
      try { 
        classGraph4.addModuleLayer((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ModuleLayer references must not be null
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        classGraph0.overrideClasspath(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't override classpath with an empty path
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      // Undeclared exception!
      try { 
        classGraph0.overrideClasspath((Iterable<?>) serviceLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't override classpath with an empty path
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[5];
      String string0 = "failureHandler cannot be null";
      stringArray0[0] = "failureHandler cannot be null";
      stringArray0[1] = "t=#*hg";
      stringArray0[2] = " / ";
      stringArray0[3] = "j`i)a5S";
      stringArray0[4] = "Whitelisting lib or ext jar: ";
      // Undeclared exception!
      try { 
        classGraph0.whitelistJars(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only whitelist jars by leafname:  / 
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreClassVisibility();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "V-]oLk,%A{bm:";
      stringArray0[1] = "";
      ClassGraph classGraph2 = classGraph1.whitelistPaths(stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "V-]oLk,%A{bm:";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "V-]oLk,%A{bm:";
      ClassGraph classGraph3 = classGraph2.whitelistPathsNonRecursive(stringArray1);
      ClassGraph classGraph4 = classGraph3.enableMethodInfo();
      ClassGraph classGraph5 = classGraph4.blacklistPaths(stringArray0);
      ClassGraph classGraph6 = classGraph5.ignoreParentClassLoaders();
      assertSame(classGraph4, classGraph6);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreParentClassLoaders();
      ClassGraph classGraph2 = classGraph1.ignoreFieldVisibility();
      ClassGraph classGraph3 = classGraph2.enableStaticFinalFieldConstantInitializerValues();
      ClassGraph classGraph4 = classGraph3.disableModuleScanning();
      ClassGraph classGraph5 = classGraph4.initializeLoadedClasses();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "!'D&doYVO4";
      stringArray0[1] = "Could not find lib or ext jar matching wildcard: ";
      stringArray0[2] = "shaded.org.apache.commons.io.filefilter.AgeFileFilter";
      stringArray0[3] = "vr1I7oTb";
      stringArray0[4] = "%5C";
      stringArray0[5] = "";
      stringArray0[6] = "S8b'fwB*Dh";
      stringArray0[7] = "nD/";
      // Undeclared exception!
      try { 
        classGraph5.whitelistPackages(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This style of whitelisting/blacklisting is no longer supported: !'D&doYVO4
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) classGraph0;
      objectArray0[1] = (Object) classGraph0;
      objectArray0[2] = (Object) classGraph0;
      objectArray0[3] = (Object) classGraph0;
      // Undeclared exception!
      try { 
        classGraph0.overrideModuleLayers(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableAnnotationInfo();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        classGraph1.whitelistClasses((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableJarScanning();
      ClassGraph classGraph2 = classGraph1.enableAllInfo();
      classGraph2.enableMethodInfo();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        arrayList0.subList(640, 640);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 640
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreMethodVisibility();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " 2L?+{N{9I4";
      stringArray0[1] = "!6v.:g";
      stringArray0[2] = "\"";
      stringArray0[3] = "Exception while getting classpath elements";
      stringArray0[4] = "#G=xuMR:";
      stringArray0[5] = "v7_Txo;]2FCH>";
      stringArray0[6] = "";
      ClassGraph classGraph2 = classGraph1.whitelistModules(stringArray0);
      ClassGraph classGraph3 = classGraph2.disableRuntimeInvisibleAnnotations();
      ClassGraph classGraph4 = classGraph3.disableDirScanning();
      // Undeclared exception!
      try { 
        classGraph4.overrideModuleLayers(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }
}
