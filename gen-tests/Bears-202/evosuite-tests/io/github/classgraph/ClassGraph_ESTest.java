/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 13:12:41 GMT 2024
 */

package io.github.classgraph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.classgraph.ClassGraph;
import io.github.classgraph.ModuleRef;
import io.github.classgraph.ScanSpec;
import io.github.classgraph.utils.LogNode;
import io.github.classgraph.utils.NestedJarHandler;
import java.io.File;
import java.net.URI;
import java.util.HashSet;
import java.util.ServiceLoader;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClassGraph_ESTest extends ClassGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableStaticFinalFieldConstantInitializerValues();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "$s30bQUk:Qe/:F%s=~";
      stringArray0[2] = "pyIqXzK{$=1dt]x1V";
      ClassGraph classGraph2 = classGraph1.blacklistPackages(stringArray0);
      // Undeclared exception!
      try { 
        classGraph2.blacklistModules((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]{\"A#Q.5j4BN$ua5";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "\u0003@V>FiuF0sE>`";
      ClassGraph classGraph1 = classGraph0.whitelistPathsNonRecursive(stringArray0);
      classGraph1.enableStaticFinalFieldConstantInitializerValues();
      Object object0 = new Object();
      ModuleRef moduleRef0 = null;
      try {
        moduleRef0 = new ModuleRef(object0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method \"descriptor\" doesn't exist
         //
         verifyException("io.github.classgraph.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableJarScanning();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|KA>y|~";
      stringArray0[1] = "nn>(N?4s9;7";
      stringArray0[2] = "O0z@Cqg>rZ";
      ClassGraph classGraph2 = classGraph1.whitelistPaths(stringArray0);
      ClassGraph classGraph3 = classGraph2.disableNestedJarScanning();
      // Undeclared exception!
      try { 
        classGraph3.addModuleLayer(classGraph2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassGraph.getVersion();
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4.4.13-SNAPSHOT";
      stringArray0[1] = "*v!?R-f>ee$";
      stringArray0[2] = "4.4.13-SNAPSHOT";
      stringArray0[3] = "4.4.13-SNAPSHOT";
      stringArray0[4] = "4.4.13-SNAPSHOT";
      stringArray0[5] = "4.4.13-SNAPSHOT";
      stringArray0[6] = "4.4.13-SNAPSHOT";
      // Undeclared exception!
      try { 
        classGraph0.whitelistPathsNonRecursive(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use a glob wildcard here: *v!?R-f>ee$
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = "-";
      stringArray0[1] = "-";
      ClassGraph classGraph1 = classGraph0.whitelistPackagesNonRecursive(stringArray0);
      classGraph1.blacklistClasses(stringArray0);
      // Undeclared exception!
      try { 
        classGraph1.scanAsync((ExecutorService) null, (-1051));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[2];
      String string0 = "*";
      stringArray0[0] = "*";
      stringArray0[1] = ".";
      ClassGraph classGraph1 = classGraph0.whitelistJars(stringArray0);
      ClassGraph classGraph2 = classGraph1.enableStaticFinalFieldConstantInitializerValues();
      // Undeclared exception!
      try { 
        classGraph2.blacklistClasses(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use a glob wildcard here: *
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableClassInfo();
      ClassGraph classGraph2 = classGraph1.ignoreClassVisibility();
      ClassGraph classGraph3 = classGraph2.disableJarScanning();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "\rspring-boot-lib:";
      stringArray0[2] = "Exception while getting classpath elements";
      stringArray0[3] = "";
      stringArray0[4] = "Pmz*I-}Y[3";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        classGraph3.whitelistClasses(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use a glob wildcard here: Pmz*I-}Y[3
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "U%YqYrh";
      stringArray0[2] = "|sUbdb4&A6GD6='";
      stringArray0[3] = "Cannot use a glob wildcard here: ";
      stringArray0[4] = "java.";
      ClassGraph classGraph1 = classGraph0.whitelistLibOrExtJars(stringArray0);
      ClassGraph classGraph2 = classGraph1.blacklistJars(stringArray0);
      ClassGraph classGraph3 = classGraph2.enableMethodInfo();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        classGraph3.overrideClasspath((Iterable<?>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't override classpath with an empty path
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableModuleScanning();
      ClassGraph classGraph2 = classGraph1.ignoreParentClassLoaders();
      ClassGraph classGraph3 = classGraph2.disableDirScanning();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "JI/6?(H";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        classGraph3.whitelistJars(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only whitelist jars by leafname: JI/6?(H
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableExternalClasses();
      ClassGraph classGraph2 = classGraph1.disableRuntimeInvisibleAnnotations();
      ClassGraph classGraph3 = classGraph2.disableNestedJarScanning();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2S1kgoqrR>W.I=4";
      stringArray0[1] = "";
      ClassGraph classGraph4 = classGraph3.blacklistPaths(stringArray0);
      ClassGraph classGraph5 = classGraph4.enableFieldInfo();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 17, 0, timeUnit1, linkedBlockingQueue0);
      BlockingQueue<Runnable> blockingQueue0 = threadPoolExecutor0.getQueue();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor1 = new ThreadPoolExecutor(17, 17, 2896L, timeUnit0, blockingQueue0, threadPoolExecutor_CallerRunsPolicy0);
      classGraph4.scanAsync((ExecutorService) threadPoolExecutor1, 522);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "2S1kgoqrR>W.I=4";
      stringArray1[2] = "";
      stringArray1[3] = "2S1kgoqrR>W.I=4";
      stringArray1[4] = "";
      stringArray1[5] = "";
      classGraph5.blacklistLibOrExtJars(stringArray1);
      ClassGraph classGraph6 = classGraph3.blacklistJars(stringArray1);
      assertSame(classGraph6, classGraph1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.disableDirScanning();
      String[] stringArray0 = new String[0];
      ClassGraph classGraph2 = classGraph1.whitelistLibOrExtJars(stringArray0);
      ClassGraph classGraph3 = classGraph2.enableFieldInfo();
      ClassGraph classGraph4 = classGraph3.initializeLoadedClasses();
      // Undeclared exception!
      try { 
        classGraph4.overrideModuleLayers(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least one override ModuleLayer must be provided
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}bd-*Mm";
      stringArray0[1] = "/usr/java/packages";
      ClassGraph classGraph1 = classGraph0.whitelistPaths(stringArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classGraph1.addModuleLayer(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#zL^ehSH`X";
      stringArray0[1] = "!;V[d&o";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "T(aQSV[?}/gp@uOxvj";
      stringArray0[5] = "7!5>";
      String string0 = "N0F4\" h5H?N =A<glIV";
      stringArray0[6] = "N0F4\" h5H?N =A<glIV";
      stringArray0[7] = "Xc[!3D-}B)}dzb";
      stringArray0[8] = "&{%\"!~D!}]CpXwnYe";
      // Undeclared exception!
      try { 
        classGraph0.whitelistLibOrExtJars(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only whitelist jars by leafname: !;V[d&o
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.ignoreParentClassLoaders();
      ClassGraph classGraph2 = classGraph1.disableModuleScanning();
      classGraph2.enableAnnotationInfo();
      ClassLoader[] classLoaderArray0 = new ClassLoader[3];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoaderArray0[0] = classLoader1;
      classLoader1.getParent();
      classLoaderArray0[1] = null;
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      Object object0 = new Object();
      ModuleRef moduleRef0 = null;
      try {
        moduleRef0 = new ModuleRef((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleReference cannot be null
         //
         verifyException("io.github.classgraph.ModuleRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      classGraph0.enableAllInfo();
      ClassLoader[] classLoaderArray0 = new ClassLoader[8];
      MockThread mockThread0 = new MockThread();
      String string0 = "";
      MockThread mockThread1 = new MockThread(mockThread0, "");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoaderArray0[0] = classLoader0;
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoaderArray0[1] = classLoader1;
      String string1 = " -- resolved to: ";
      String string2 = null;
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[1];
      String string0 = "This style of whitelisting/blacklisting is no longer supported: ";
      stringArray0[0] = "This style of whitelisting/blacklisting is no longer supported: ";
      ClassGraph classGraph1 = classGraph0.whitelistPackagesNonRecursive(stringArray0);
      classGraph1.ignoreParentModuleLayers();
      ClassLoader[] classLoaderArray0 = new ClassLoader[7];
      ModuleRef moduleRef0 = null;
      try {
        moduleRef0 = new ModuleRef("This style of whitelisting/blacklisting is no longer supported: ", "This style of whitelisting/blacklisting is no longer supported: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method \"descriptor\" doesn't exist
         //
         verifyException("io.github.classgraph.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "v7r.&KsOAp";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Exception while getting modules";
      stringArray0[5] = "";
      stringArray0[6] = ",[pksEu$&/l`k";
      stringArray0[7] = "";
      stringArray0[8] = "";
      ClassGraph classGraph1 = classGraph0.whitelistModules(stringArray0);
      ClassGraph classGraph2 = classGraph1.enableSystemPackages();
      ClassGraph classGraph3 = classGraph2.disableModuleScanning();
      ClassGraph classGraph4 = classGraph3.enableMethodInfo();
      ClassGraph classGraph5 = classGraph4.disableRuntimeInvisibleAnnotations();
      ClassGraph.ScanResultProcessor classGraph_ScanResultProcessor0 = mock(ClassGraph.ScanResultProcessor.class, new ViolatedAssumptionAnswer());
      ClassGraph.FailureHandler classGraph_FailureHandler0 = mock(ClassGraph.FailureHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        classGraph5.scanAsync((ExecutorService) null, 0, classGraph_ScanResultProcessor0, classGraph_FailureHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        classGraph0.blacklistJars(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.classgraph.utils.JarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.initializeLoadedClasses();
      ClassGraph classGraph2 = classGraph1.enableFieldInfo();
      classGraph2.enableClassInfo();
      String[] stringArray0 = new String[1];
      String string0 = "e3<a0wIl0NDYQLN9v";
      ScanSpec scanSpec0 = new ScanSpec();
      LogNode logNode0 = new LogNode();
      LogNode logNode1 = logNode0.log("&<Z2Gm?]T\"y$");
      logNode1.log("&<Z2Gm?]T\"y$", (-675L));
      NestedJarHandler nestedJarHandler0 = new NestedJarHandler(scanSpec0, logNode1);
      MockFile mockFile0 = new MockFile("e3<a0wIl0NDYQLN9v", "---");
      File file0 = nestedJarHandler0.getOutermostJar(mockFile0);
      // Undeclared exception!
      try { 
        classGraph1.addModuleLayer(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "JSON is not in correct format";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "Blacklisting lib or ext jar: ";
      stringArray0[3] = ".";
      ClassGraph classGraph1 = classGraph0.blacklistModules(stringArray0);
      ClassGraph classGraph2 = classGraph1.removeTemporaryFilesAfterScan();
      ClassGraph classGraph3 = classGraph2.disableModuleScanning();
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      // Undeclared exception!
      try { 
        classGraph3.overrideClasspath((Iterable<?>) serviceLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't override classpath with an empty path
         //
         verifyException("io.github.classgraph.ClassGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Blacklisting lib or ext jar: ";
      stringArray0[1] = "Blacklisting lib or ext jar: ";
      stringArray0[2] = "1>&T> *?0";
      stringArray0[3] = "";
      stringArray0[4] = "5,)2c_m#q,].";
      ClassGraph classGraph1 = classGraph0.blacklistPaths(stringArray0);
      assertSame(classGraph0, classGraph1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[0];
      ClassGraph classGraph1 = classGraph0.blacklistPaths(stringArray0);
      ClassGraph classGraph2 = classGraph1.enableMethodInfo();
      // Undeclared exception!
      try { 
        classGraph2.overrideModuleLayers(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least one override ModuleLayer must be provided
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.verbose();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*LXr*@El5b:VW{%";
      stringArray0[1] = "";
      stringArray0[2] = "LmJB?,%'Q[,]hd>jt=2";
      stringArray0[3] = "";
      stringArray0[4] = "Bad class name";
      String string0 = "{Q'Sr\"X!00z(6R=q_3";
      stringArray0[5] = "{Q'Sr\"X!00z(6R=q_3";
      stringArray0[6] = "Unexpected exception during scan";
      stringArray0[7] = "";
      stringArray0[8] = ";%HBjsi216T\"%lbW";
      // Undeclared exception!
      try { 
        classGraph1.whitelistPaths(stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 15
         // ^.*LXr.*@El5b:VW{%\\.$
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableMethodInfo();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) classGraph1;
      objectArray0[1] = (Object) classGraph0;
      // Undeclared exception!
      try { 
        classGraph1.overrideModuleLayers(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String string0 = "wj=\"Iufw~hXgvrBC9";
      MockFile mockFile0 = new MockFile("wj=\"Iufw~hXgvrBC9");
      // Undeclared exception!
      try { 
        classGraph0.addModuleLayer(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleLayer must be of type java.lang.ModuleLayer
         //
         verifyException("io.github.classgraph.ScanSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.overrideClasspath("c]L^/J@ue`");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y[P/jWOhi5H";
      stringArray0[1] = "c]L^/J@ue`";
      stringArray0[2] = "c]L^/J@ue`";
      stringArray0[3] = "c]L^/J@ue`";
      stringArray0[4] = "c]L^/J@ue`";
      stringArray0[5] = "[EXVz4<#";
      stringArray0[6] = "c]L^/J@ue`";
      stringArray0[7] = "c]L^/J@ue`";
      ClassGraph classGraph2 = classGraph1.whitelistPackagesNonRecursive(stringArray0);
      ClassGraph classGraph3 = classGraph2.enableAnnotationInfo();
      ClassGraph classGraph4 = classGraph3.whitelistPackages(stringArray0);
      ClassGraph classGraph5 = classGraph4.enableSystemPackages();
      ClassGraph classGraph6 = classGraph5.enableAnnotationInfo();
      assertSame(classGraph1, classGraph6);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Thread interrupted while getting modules";
      stringArray0[1] = "";
      stringArray0[2] = "fobuAJ";
      ClassGraph classGraph1 = classGraph0.blacklistClasses(stringArray0);
      ClassGraph classGraph2 = classGraph1.enableSystemPackages();
      ClassGraph classGraph3 = classGraph2.whitelistClasses(stringArray0);
      ClassGraph classGraph4 = classGraph3.enableExternalClasses();
      classGraph4.ignoreMethodVisibility();
      ClassLoader[] classLoaderArray0 = new ClassLoader[9];
      ScanSpec scanSpec0 = new ScanSpec();
      LogNode logNode0 = new LogNode();
      NestedJarHandler nestedJarHandler0 = new NestedJarHandler(scanSpec0, logNode0);
      nestedJarHandler0.getOutermostJar((File) null);
      ModuleRef moduleRef0 = null;
      try {
        moduleRef0 = new ModuleRef((Object) null, classGraph2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // moduleReference cannot be null
         //
         verifyException("io.github.classgraph.ModuleRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableStaticFinalFieldConstantInitializerValues();
      ClassGraph classGraph2 = classGraph1.ignoreParentClassLoaders();
      ClassGraph classGraph3 = classGraph2.enableMethodInfo();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) classGraph2;
      objectArray0[1] = (Object) classGraph2;
      objectArray0[2] = (Object) classGraph0;
      objectArray0[3] = (Object) classGraph2;
      ClassGraph classGraph4 = classGraph3.overrideClasspath(objectArray0);
      ClassGraph classGraph5 = classGraph4.enableAllInfo();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassGraph classGraph6 = classGraph5.addClassLoader(classLoader0);
      assertSame(classGraph6, classGraph0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.enableStaticFinalFieldConstantInitializerValues();
      String[] stringArray0 = new String[0];
      ClassGraph classGraph2 = classGraph1.blacklistLibOrExtJars(stringArray0);
      ClassGraph classGraph3 = classGraph2.blacklistPaths(stringArray0);
      classGraph0.stripZipSFXHeaders();
      ClassGraph classGraph4 = classGraph3.whitelistClasses(stringArray0);
      ClassGraph classGraph5 = classGraph4.enableAllInfo();
      classGraph5.whitelistPackagesNonRecursive(stringArray0);
      ClassGraph classGraph6 = classGraph5.removeTemporaryFilesAfterScan();
      assertSame(classGraph6, classGraph5);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassGraph classGraph0 = new ClassGraph();
      ClassGraph classGraph1 = classGraph0.overrideClasspath("ZgAm#b=j;G.>Qi");
      ClassGraph classGraph2 = classGraph1.ignoreFieldVisibility();
      ClassGraph classGraph3 = classGraph2.disableJarScanning();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZgAm#b=j;G.>Qi";
      stringArray0[1] = "ZgAm#b=j;G.>Qi";
      stringArray0[2] = "ZgAm#b=j;G.>Qi";
      stringArray0[3] = "ZgAm#b=j;G.>Qi";
      stringArray0[4] = "ZgAm#b=j;G.>Qi";
      stringArray0[5] = "ZgAm#b=j;G.>Qi";
      stringArray0[6] = "ZgAm#b=j;G.>Qi";
      stringArray0[7] = "ZgAm#b=j;G.>Qi";
      stringArray0[8] = "ZgAm#b=j;G.>Qi";
      ClassGraph classGraph4 = classGraph3.whitelistPaths(stringArray0);
      ClassLoader[] classLoaderArray0 = new ClassLoader[2];
      MockThread mockThread0 = new MockThread("https://");
      MockThread mockThread1 = new MockThread(mockThread0, "ZgAm#b=j;G.>Qi");
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1, "ZgAm#b=j;G.>Qi", 100000000L);
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      classLoaderArray0[0] = classLoader0;
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      classLoaderArray0[1] = classLoader1;
      ClassGraph classGraph5 = classGraph4.overrideClassLoaders(classLoaderArray0);
      ClassGraph classGraph6 = classGraph5.addClassLoader(classLoader0);
      assertSame(classGraph0, classGraph6);
  }
}
