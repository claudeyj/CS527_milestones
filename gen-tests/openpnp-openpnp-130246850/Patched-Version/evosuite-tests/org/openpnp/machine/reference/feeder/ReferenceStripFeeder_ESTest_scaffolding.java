/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Jun 05 06:48:18 GMT 2024
 */

package org.openpnp.machine.reference.feeder;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class ReferenceStripFeeder_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.openpnp.machine.reference.feeder.ReferenceStripFeeder"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.OFF; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ReferenceStripFeeder_ESTest_scaffolding.class.getClassLoader() ,
      "org.openpnp.model.Placement$Type",
      "org.openpnp.spi.Feeder",
      "org.simpleframework.xml.strategy.Strategy",
      "org.openpnp.spi.PropertySheetHolder",
      "org.openpnp.model.Fiducial",
      "org.openpnp.model.Placement",
      "org.openpnp.model.BoardLocation",
      "org.openpnp.model.Location",
      "org.openpnp.model.Configuration",
      "org.openpnp.spi.Nozzle",
      "org.openpnp.model.Part",
      "org.openpnp.model.AbstractModelObject",
      "org.openpnp.model.Board$Side",
      "org.simpleframework.xml.stream.Style",
      "org.openpnp.spi.Movable",
      "org.simpleframework.xml.Serializer",
      "org.openpnp.spi.base.AbstractFeeder",
      "org.openpnp.machine.reference.ReferenceFeeder",
      "org.openpnp.util.ResourceUtils$PathResolutionException",
      "org.openpnp.model.LengthUnit",
      "org.openpnp.model.BoardPad",
      "org.openpnp.model.Board",
      "org.simpleframework.xml.Root",
      "org.openpnp.spi.Camera",
      "org.openpnp.model.Length",
      "org.openpnp.gui.support.Wizard",
      "org.openpnp.spi.PropertySheetHolder$PropertySheet",
      "org.openpnp.model.Outline",
      "org.openpnp.ConfigurationListener",
      "org.openpnp.model.Identifiable",
      "org.openpnp.spi.HeadMountable",
      "org.openpnp.machine.reference.feeder.ReferenceStripFeeder$TapeType",
      "org.openpnp.model.Point",
      "org.openpnp.model.Named",
      "org.openpnp.machine.reference.feeder.ReferenceStripFeeder",
      "org.openpnp.spi.WizardConfigurable",
      "org.openpnp.spi.Locatable"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ReferenceStripFeeder_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.openpnp.model.AbstractModelObject",
      "org.openpnp.spi.base.AbstractFeeder",
      "org.openpnp.machine.reference.ReferenceFeeder",
      "org.openpnp.machine.reference.feeder.ReferenceStripFeeder",
      "org.openpnp.machine.reference.feeder.ReferenceStripFeeder$TapeType",
      "org.openpnp.model.LengthUnit",
      "org.openpnp.gui.MainFrame",
      "org.openpnp.spi.base.AbstractPasteDispenser",
      "org.openpnp.machine.reference.ReferencePasteDispenser",
      "org.openpnp.model.Configuration",
      "org.openpnp.model.Length",
      "org.openpnp.spi.base.AbstractCamera",
      "nu.pattern.OpenCV",
      "nu.pattern.OpenCV$SharedLoader",
      "org.opencv.core.Core",
      "nu.pattern.OpenCV$OS",
      "nu.pattern.OpenCV$Arch",
      "nu.pattern.OpenCV$1",
      "nu.pattern.OpenCV$TemporaryDirectory",
      "nu.pattern.OpenCV$TemporaryDirectory$1",
      "nu.pattern.OpenCV$SharedLoader$Holder",
      "org.openpnp.machine.reference.ReferenceCamera",
      "org.openpnp.machine.reference.camera.OpenCvCamera",
      "org.openpnp.spi.Camera$Looking",
      "org.openpnp.model.Location",
      "nu.pattern.OpenCV$TemporaryDirectory$2",
      "org.openpnp.spi.base.AbstractNozzle",
      "org.openpnp.machine.reference.ReferenceNozzle",
      "org.openpnp.util.IdentifiableList",
      "org.openpnp.model.Footprint",
      "org.openpnp.spi.base.AbstractMachine",
      "org.openpnp.machine.reference.ReferenceMachine",
      "org.openpnp.machine.reference.vision.ReferenceBottomVision",
      "org.apache.commons.io.output.StringBuilderWriter",
      "org.apache.commons.io.IOUtils",
      "org.openpnp.vision.pipeline.CvPipeline",
      "org.openpnp.spi.base.AbstractHead",
      "org.openpnp.machine.reference.ReferenceHead",
      "org.openpnp.spi.base.AbstractActuator",
      "org.openpnp.machine.reference.ReferenceActuator",
      "org.openpnp.spi.base.AbstractNozzleTip",
      "org.openpnp.machine.reference.ReferenceNozzleTip",
      "org.openpnp.machine.reference.ReferenceNozzleTip$Calibration",
      "org.openpnp.model.Placement",
      "org.openpnp.model.Board$Side",
      "org.openpnp.model.Board",
      "org.openpnp.model.Outline",
      "org.openpnp.model.BoardPad",
      "org.openpnp.model.BoardPad$Type",
      "org.openpnp.model.BoardLocation",
      "org.openpnp.machine.reference.feeder.ReferenceDragFeeder",
      "org.openpnp.machine.reference.driver.NullDriver",
      "org.openpnp.machine.reference.driver.AbstractSerialPortDriver",
      "org.openpnp.machine.reference.driver.GrblDriver",
      "com.github.sarxos.webcam.util.jh.JHFilter",
      "com.github.sarxos.webcam.util.jh.JHGrayFilter",
      "org.openpnp.machine.reference.camera.Webcams",
      "org.openpnp.machine.reference.feeder.ReferenceTubeFeeder",
      "org.openpnp.machine.reference.feeder.ReferenceTrayFeeder",
      "org.openpnp.machine.reference.camera.ImageCamera",
      "org.openpnp.machine.reference.driver.TinygDriver",
      "com.google.gson.JsonParser",
      "org.openpnp.machine.reference.camera.VfwCamera",
      "org.openpnp.model.Placement$Type"
    );
  }
}
