/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 05 01:46:22 GMT 2024
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(fraction0);
      String string0 = fraction1.toString();
      assertEquals("-1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals((byte)1, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.TWO_FIFTHS.divide(fraction1);
      assertTrue(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(6);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.divide(fraction0);
      assertEquals(13.333333333333334, fraction1.percentageValue(), 0.01);
      assertEquals(15, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 3);
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(3L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction((-26.76319642251245));
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals((-17744), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 2147020527, 2147020527);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,020,527 to fraction (9,223,372,034,707,755,282/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2623.2073402441315));
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals((-2623.457343412527), fraction2.doubleValue(), 0.01);
      assertEquals(1852, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2945), (-2945));
      Fraction fraction1 = fraction0.subtract(1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(2147020527);
      assertEquals((-2147020526), fraction1.getNumerator());
      assertEquals((byte)18, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2703));
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals((-2703), fraction0.getNumerator());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-0.03699593044765076), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.reciprocal();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      double double0 = fraction0.percentageValue();
      assertEquals(75.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(2115, 1);
      Fraction fraction1 = fraction0.negate();
      assertEquals((-2115), fraction1.getNumerator());
      assertEquals(2115, fraction0.intValue());
      assertEquals((byte) (-67), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.multiply((-1914));
      Fraction fraction2 = fraction1.negate();
      assertEquals(957, fraction2.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals((-957), fraction1.getNumerator());
      assertEquals(2, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      Fraction fraction2 = fraction0.ONE_HALF.reciprocal();
      Fraction fraction3 = fraction2.multiply(fraction1);
      assertEquals((-6), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-0.15), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.multiply(0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2945), (-2945));
      Fraction fraction1 = fraction0.add((-2945));
      long long0 = fraction1.longValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-294400.0), fraction1.percentageValue(), 0.01);
      assertEquals((-2944L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(270.8784039, 270.8784039, 2462);
      int int0 = fraction0.intValue();
      assertEquals(270, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.TWO_THIRDS.subtract(261);
      int int0 = fraction1.intValue();
      assertEquals(3, fraction1.getDenominator());
      assertEquals((-260.3333333333333), fraction1.doubleValue(), 0.01);
      assertEquals((-260), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2423, (-1));
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte) (-119), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.negate();
      float float0 = fraction1.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      float float0 = fraction0.floatValue();
      assertEquals(0.25F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.negate();
      double double0 = fraction1.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2925), (-2925));
      Fraction fraction1 = fraction0.multiply((-2925));
      double double0 = fraction1.doubleValue();
      assertEquals((-2925.0), double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2925), fraction1.getNumerator());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.negate();
      Fraction fraction2 = fraction1.divide(fraction0);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-166.66666666666669), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(2115, 1);
      Fraction fraction1 = fraction0.ZERO.divide(1878);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(2115L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.016666666666689395);
      Fraction fraction1 = fraction0.add(884);
      Fraction fraction2 = fraction1.divide(855);
      assertEquals(53041, fraction2.getNumerator());
      assertEquals(1.0339376218323586, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_THIRD.add((-1195));
      Fraction fraction2 = fraction1.divide(4);
      assertEquals((-29866.666666666668), fraction2.percentageValue(), 0.01);
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-1194L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction0.ONE.add(fraction1);
      assertTrue(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.multiply((-1914));
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(2, fraction1.getDenominator());
      assertEquals((-1913), fraction2.getNumerator());
      assertEquals(4, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(270.8784039, 270.8784039, 2462);
      Fraction fraction1 = fraction0.multiply(fraction0);
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(73170, fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply((-4122));
      Fraction fraction2 = fraction1.add((-4122));
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2650), (-2650));
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.subtract(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.abs();
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals(2147483647L, fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(368779223, (-2264));
      Fraction fraction1 = fraction0.TWO_THIRDS.multiply(368779223);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2945), (-2945));
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2147483625, 2147483625);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction((-270), (-270));
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(209, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 209/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      double double0 = fraction0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      String string0 = fraction0.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      String string0 = fraction0.toString();
      assertEquals("1 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-4122));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-4,122, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(2759, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2,759/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-2925));
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(2462, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 2,462/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      Fraction fraction1 = new Fraction(7.342130375898037E-14);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = new Fraction(6.100094651628751E-8, Integer.MIN_VALUE);
      Fraction fraction2 = fraction0.TWO_QUARTERS.multiply(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.negate();
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals((byte)0, fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.ZERO.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.TWO_THIRDS.subtract(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(66.66666666666666, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = new Fraction(6.100094651628751E-8, Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((byte)1, fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1428), 254);
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2623.2073402441315));
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(463, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.negate();
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, int0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2623.2073402441315));
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals((byte) (-63), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = new Fraction(270.8784039, 270.8784039, 2462);
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(270L, fraction0.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-551.04532), 2.824858756834865E-4, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -551.045 to fraction after -2,147,483,648 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2650), (-1005.16), (-2650));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,650 to fraction (2,651/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      double double0 = fraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      float float0 = fraction0.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.getNumerator();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2945), (-2945));
      fraction0.hashCode();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.intValue();
      assertEquals(75.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      long long0 = fraction0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      FractionField fractionField0 = fraction0.ZERO.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.THREE_FIFTHS.add(fraction0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(2.6F, fraction1.floatValue(), 0.01F);
  }
}
