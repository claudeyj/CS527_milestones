/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 13:08:29 GMT 2024
 */

package hu.oe.nik.szfmv.environment;

import org.junit.Test;
import static org.junit.Assert.*;
import hu.oe.nik.szfmv.environment.World;
import hu.oe.nik.szfmv.environment.WorldObject;
import hu.oe.nik.szfmv.environment.models.RoadSign;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class World_ESTest extends World_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      World world0 = new World(1, 1);
      int int0 = world0.getWidth();
      assertEquals(1, int0);
      assertEquals(1, world0.getHeight());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      World world0 = new World(1, 1);
      world0.setWidth((-1640));
      int int0 = world0.getWidth();
      assertEquals((-1640), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      World world0 = new World(1, 1);
      assertEquals(1, world0.getHeight());
      
      world0.setHeight(0);
      int int0 = world0.getHeight();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      World world0 = new World(349, 349);
      int int0 = world0.getHeight();
      assertEquals(349, world0.getWidth());
      assertEquals(349, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      World world0 = new World((-1102), (-1102));
      world0.build("oWI42rTK1e\"?Hau$$[");
      assertEquals((-1102), world0.getWidth());
      assertEquals((-1102), world0.getHeight());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      World world0 = new World((-1102), (-1102));
      RoadSign roadSign0 = new RoadSign(2625, (-833), "D(J`mF|C");
      world0.addObjectToWorld(roadSign0);
      assertEquals((-1102), world0.getWidth());
      assertEquals((-1102), world0.getHeight());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      World world0 = new World((-1102), (-1102));
      int int0 = world0.getHeight();
      assertEquals((-1102), int0);
      assertEquals((-1102), world0.getWidth());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      World world0 = new World((-1102), (-1102));
      List<WorldObject> list0 = world0.getWorldObjects();
      assertEquals((-1102), world0.getHeight());
      assertEquals((-1102), world0.getWidth());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      World world0 = new World(0, 0);
      int int0 = world0.getWidth();
      assertEquals(0, int0);
      assertEquals(0, world0.getHeight());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      World world0 = new World(1, (-5059));
      assertEquals((-5059), world0.getHeight());
      
      world0.setHeight(1);
      assertEquals(1, world0.getHeight());
  }
}
