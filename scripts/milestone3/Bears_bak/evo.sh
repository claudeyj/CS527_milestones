#!/bin/bash
readonly script_bears_dir=$(realpath $(dirname "${BASH_SOURCE[0]}")) # scripts/milestone3/Bears
readonly script_dir=$(dirname $script_bears_dir) # scripts/milestone3
readonly lib_dir=$(realpath ${script_dir}/../../lib)
readonly work_dir=$(realpath ${script_dir}/../../work_dir)
readonly subjects_dir=$(realpath ${script_dir}/../../subjects)
# echo "Bears dir: $script_bears_dir"
# echo "Script dir: $script_dir"
# echo "Subjects dir: $subjects_dir"
# echo "Lib dir: $lib_dir"
# exit 0
readonly bugs_list=${script_bears_dir}/projects.txt
readonly versions=("Buggy-Version" "Patched-Version")
readonly bug_dataset="Bears"
readonly c_u_t="evoCUT.txt"
readonly log_file="${subjects_dir}/$bug_dataset/maven_build_log.txt"
readonly budget=3600

readonly evosuite_jar=${lib_dir}/evosuite-1.2.0.jar
readonly evosuite_standalone_jar=${lib_dir}/evosuite-standalone-runtime-1.2.0.jar
readonly clover_jar=${lib_dir}/clover-4.4.1.jar
readonly groovy_jar=${lib_dir}/groovy.jar # TODO

declare -A clover_class_UT

# Define a function to handle logging and exiting on failure
function handle_failure() {
    echo "Maven command $1 failed for bug $2  $3" >> "$log_file"
}


mvn_clean_up() {
    echo "Cleaning up"
    mvn clean || handle_failure "clean" $1 $2
    echo "Done cleaning up"
}

mvn_build() {
    echo "Building"
    mvn compile || handle_failure "compile" $1 $2
    echo "Done building"
}

mvn_dependency(){
    echo "Building dependency"
    mvn dependency:copy-dependencies || handle_failure "dependency" $1 $2
    echo "Done building dependency"
}

copy_test_to_bug_folder() {
    echo "Started copying test generated by evosuite"

    local bug_id=$1
    local version=$2
    local cut=$3
    local cut_folder=$(awk -F. '{sub(/\.[^.]*$/, "", $0); for (i=1; i<NF; i++) printf $i "/"; print $NF}' <<< "$cut")
    local source_location=evosuite-tests/$cut_folder
    local dest_location="${subjects_dir}/$bug_dataset/$bug_id/$version/Evosuite"
    local testClass="${cut##*.}"

    mkdir -p $dest_location
    echo cp -r $source_location/${testClass}_ESTest.java $dest_location/Evosuite-${testClass}_ESTest.java
    cp -r $source_location/${testClass}_ESTest.java $dest_location/Evosuite-${testClass}_ESTest.java
    echo cp -r $source_location/${testClass}_ESTest_scaffolding.java $dest_location/Evosuite-${testClass}_ESTest_scaffolding.java
    cp -r $source_location/${testClass}_ESTest_scaffolding.java $dest_location/Evosuite-${testClass}_ESTest_scaffolding.java

    echo "Done copying back to dataset"
}

generate_evo_tests() {
    local class_under_test=$1
    echo "Generating EvoSuite tests"

    if [ "$2" == Bears-245 ]; then
        $EVO -class $class_under_test -projectCP target/classes -Duse_separate_classloader=false -Dsandbox=false -Dsandbox_mode=OFF -Dsearch_budget=$budget -Dstopping_condition=MaxTime || handle_failure "Evosuite" $2 $1
    elif [ "$2" == Bears-242 ]; then
        # mvn dependency
        echo "Generating MVN dependency"
        mvn dependency:build-classpath -Dmdep.outputFile=cp.txt || handle_failure "dependency" $2 $1

        $EVO -class $class_under_test -projectCP cxx-squid/target/classes:$(cat cxx-squid/cp.txt) -Duse_separate_classloader=false -Dsandbox=false -Dsandbox_mode=OFF -Dsearch_budget=$budget -Dstopping_condition=MaxTime || handle_failure "Evosuite" $2 $1
    elif [ "$2" == Bears-145 ]; then
        $EVO -class $class_under_test -projectCP suite/spdz/target/classes:core/target/classes -Duse_separate_classloader=false -Dsandbox=false -Dsandbox_mode=OFF -Dsearch_budget=$budget -Dstopping_condition=MaxTime || handle_failure "Evosuite" $2 $1
    else
        # mvn dependency
        echo "Generating MVN dependency"
        mvn dependency:build-classpath -Dmdep.outputFile=cp.txt || handle_failure "dependency" $2 $1

        $EVO -class $class_under_test -projectCP target/classes:$(cat cp.txt) -Duse_separate_classloader=false -Dsandbox=false -Dsandbox_mode=OFF -Dsearch_budget=$budget || handle_failure "Evosuite" $2 $1
    fi

    # echo $EVO -class custom_programs.$project_name -projectCP $class_jm_dir -Duse_separate_classloader=false -Dsandbox=false -Dsandbox_mode=OFF
    # $EVO -class custom_programs.$project_name -projectCP $class_jm_dir -Duse_separate_classloader=false -Dsandbox=false -Dsandbox_mode=OFF
    echo "Done generating EvoSuite tests"
}

generate_and_store_evosuite_test(){
    local bug_id=$1
    local version=$2
    local cut=$3

    generate_evo_tests "$cut" "$bug_id"

    copy_test_to_bug_folder "$bug_id" "$version" "$cut"

}


generate_evosuite_test_for_bug() {
    local bug_id=$1
    local classes_u_t=()
    # copying the bug folder
    cp -r "${subjects_dir}/$bug_dataset/$bug_id" ${work_dir}

    # Switching to bug Folder
    cd ${work_dir}/$bug_id

    # Read lines from the file and store them in the array
    if [ -e "$c_u_t" ]; then
    while IFS= read -r line <&3; do
        classes_u_t+=("$line")
    done 3<"$c_u_t"
    else
        echo "File not found: $c_u_t"
    fi

    

    for version in "${versions[@]}";do
        echo "Switching to  $bug_id/$item"
        # Switch to version folder(buggy or patch)
        cd "$version"

        # Clean the meaven project
        mvn_clean_up "$bug_id" "$version"

        # Build the meaven project
        mvn_build "$bug_id" "$version"

        for class in "${classes_u_t[@]}";do
            echo "generating evosuite test for class  $class"

            generate_and_store_evosuite_test "$bug_id" "$version" "$class"

            echo "done generated evosuite test for class  $class"
        done

        # switching back to bug folder
        cd ..

    done

    # Switching to root folder(currentExecution)
    cd ..
    
    # removing the bug folder
    rm -rf $bug_id
}


# -------------------------- build & run test ------------------------------

build_evo_tests() {
    validate_version=$1
    source_version=$2
    bug_id=$3
    target=target/classes

    echo "Building EvoSuite test"

    mvn_clean_up "$bug_id" "$source_version"

    # Build the meaven project
    mvn_build "$bug_id" "$source_version"

    mvn_dependency "$bug_id" "$source_version"
    if [ "$bug_id" == Bears-145 ]; then
        export CLASSPATH=suite/spdz/target/classes:core/target/classes:$evosuite_standalone_jar:target/dependency/*:suite/spdz/target/classes/evosuite-tests
        target=suite/spdz/"$target"
    elif [ "$bug_id" == Bears-242 ]; then
        export CLASSPATH=cxx-squid/target/classes:$evosuite_standalone_jar:cxx-squid/target/dependency/*:cxx-squid/target/classes/evosuite-tests
        target=cxx-squid/"$target"
    else
        export CLASSPATH=target/classes:$evosuite_standalone_jar:target/dependency/*:target/classes/evosuite-tests
    fi

    mkdir "$target"/evosuite-tests

    javac -cp $CLASSPATH Evosuite/*.java -d "$target"/evosuite-tests || handle_failure "evosuite test build" $3 $2

}

run_evo_tests() {
    validate_version=$1
    source_version=$2
    bug_id=$3
    classes_u_t=$4
    report_file=${subjects_dir}/$bug_dataset/$bug_id/$source_version/Evosuite/test_generated_with_"$validate_version"_running_on_"$source_version".log

    if [ -f "$report_file" ]; then
        rm -rf "$report_file"
    fi

    for class in "${classes_u_t[@]}";do
        if [[ -f "Evosuite/${class##*.}_ESTest.java" ]]; then
            if [ "$bug_id" == Bears-145 ]; then
                export CLASSPATH=$clover_jar:$groovy_jar:$evosuite_jar:suite/spdz/target/classes:core/target/classes:$evosuite_standalone_jar:target/dependency/*:suite/spdz/target/classes/evosuite-tests
            elif [ "$bug_id" == Bears-242 ]; then
                export CLASSPATH=$clover_jar:$groovy_jar:$evosuite_jar:cxx-squid/target/classes:$evosuite_standalone_jar:cxx-squid/target/dependency/*:cxx-squid/target/classes/evosuite-tests
            else
                export CLASSPATH=$clover_jar:$groovy_jar:$evosuite_jar:target/classes:$evosuite_standalone_jar:target/dependency/*:target/classes/evosuite-tests
            fi
            java -cp $CLASSPATH org.junit.runner.JUnitCore "$class"_ESTest >> $report_file || handle_failure "evosuite test run" $3 $2
        fi
    done
}

copy_change_test_filename() {
    validate_version=$1

    rm -rf Evosuite

    # copying the validate test
    cp -r "${subjects_dir}/$bug_dataset/$bug_id/$validate_version/Evosuite" .
    
    cd Evosuite
    for file in Evosuite-*.java; do
        # Extract the filename without the prefix
        new_file="${file#Evosuite-}"
        # Rename the file
        mv "$file" "$new_file"
    done
    cd ..
}

build_run_test_for_bug() {
    source_version=$1
    validate_version=$2
    bug_id=$3
    local classes_u_t=()

    # Read lines from the file and store them in the array
    if [ -e "$c_u_t" ]; then
    while IFS= read -r line <&3; do
        classes_u_t+=("$line")
    done 3<"$c_u_t"
    else
        echo "File not found: $c_u_t"
    fi

    # copying the bug version folder
    cp -r "${subjects_dir}/$bug_dataset/$bug_id/$source_version" .

    # Switch to version folder(buggy or patch)
    cd "$source_version"
    copy_change_test_filename "$validate_version"

    build_evo_tests "$validate_version" "$source_version" "$bug_id"
    run_evo_tests "$validate_version" "$source_version" "$bug_id" "$classes_u_t"

    # switching back to bug folder
    cd ..

    rm -rf "$source_version"


}


build_and_run_for_revealing_test() {
    local bug_id=$1

    mkdir $bug_id
    cd $bug_id
    cp -r "${subjects_dir}/$bug_dataset/$bug_id/$c_u_t" .

    for version in "${versions[@]}";do

        build_run_test_for_bug "$version" "$version" "$bug_id"

        other_version=""
        if [[ "$version" == "Buggy-Version" ]]; then
            other_version="Patched-Version"
        else
            other_version="Buggy-Version"
        fi

        build_run_test_for_bug "$version" "$other_version" "$bug_id"

    done


    # Switching to root folder(currentExecution)
    cd ..

    # removing the bug folder
    rm -rf $bug_id
}

# ----------------------------------------- coverage -----------------------------------------
append_unique_string() {
    local string="$1"
    if [[ -z ${clover_class_UT[$string]} ]]; then
        clover_class_UT["$string"]=1
    fi
}

get_CUT_list(){
    space_separated_string=""
    for key in "${!clover_class_UT[@]}"; do
        space_separated_string+=",$key"
    done

    # Remove leading whitespace
    space_separated_string="${space_separated_string#","}"

    echo "$space_separated_string"
}

change_test_filename() {
    validate_version=$1
    newVersion=""
    if [[ $validate_version == Buggy-Version ]]; then
        newVersion="Buggy"
    else
        newVersion="Patched"
    fi
    cd $validate_version/Evosuite
    for file in Evosuite-*.java; do

        if [[ $file == *scaffolding* ]]; then
            new_file="${file/_scaffolding/_"$newVersion"_scaffolding}"
            new_file="${new_file#Evosuite-}"
            mv "$file" "$new_file"

            oldclassName="${file#Evosuite-}"

            # Remove the suffix ".java" from the result
            oldclassName="${oldclassName%.java}"

            newclassName="${new_file#Evosuite-}"

            # Remove the suffix ".java" from the result
            newclassName="${newclassName%.java}"
            sed -i "s/$oldclassName/$newclassName/g" $new_file
            append_unique_string "$newclassName"
        else
            new="${file%.java}_$newVersion.java"
            # Extract the filename without the prefix
            new_file="${new#Evosuite-}"
            # Rename the file
            mv "$file" "$new_file"

            oldclassName="${file#Evosuite-}"

            # Remove the suffix ".java" from the result
            oldclassName="${oldclassName%.java}"
            newclassName="$oldclassName"_"$newVersion"

            sed -i "s/$oldclassName/$newclassName/g" $new_file
            append_unique_string "$newclassName"
        fi


    done
    cd ..
    cd ..
}

join_paths() {
    (IFS=/; echo "$*" | tr -s /)
}

export_coverage() {
    local dest_location="${subjects_dir}/$bug_dataset/$bug_id/Coverage"
    mkdir -p $dest_location
    cp -r "Coverage/." $dest_location

}

generate_coverage() {
    local bug_id=$1

    cp -r "${subjects_dir}/$bug_dataset/$bug_id" .
    cp -r "${lib_dir}/evo-modify-clover-config.py" .

    cd $bug_id


    echo "Cleaning existing reports"
    rm -rf Coverage
    cd Patched-Version
    mvn -q clean clover:clean || handle_failure "clover clean" $bug_id
    cd ..
    echo "Current directory"
    pwd
    echo "Copying error revealing and patched tests into each other"
    change_test_filename "Buggy-Version"
    change_test_filename "Patched-Version"
    cp -a "Patched-Version/Evosuite/." "Buggy-Version/Evosuite/"
    cp -a "Buggy-Version/Evosuite/." "Patched-Version/Evosuite/"
    result=$(get_CUT_list)
    for version in "${versions[@]}";do
        # version=Patched-Version
        existing_test_directory=$(cat evoTEST_LOC.txt)
        mkdir -p "Coverage/$version-Evosuite test coverage/" 
        cd $version
        # existing_test_directory=$(find . -maxdepth 6 -type f -name "*Test.java" | grep -v "Evosuite" | xargs -I {} dirname {} | sort -u | head -n1)
        # echo "$existing_test_directory"
        cp Evosuite/*.java $existing_test_directory/.
        mvn -q clean clover:clean  || handle_failure "clover clean" $bug_id $version
        cut_path=$(join_paths $script_dir $bug_id "evoCUT.txt")
        xml_path=$(join_paths $script_dir $bug_id $version "evo_file_list.txt")
        python3 $script_dir/evo-modify-clover-config.py $cut_path $xml_path 
        echo "Generating clover report for $version"
        mvn -fn -Dmaven.clover.includesFile=$xml_path -Denforcer.skip=true \
        -Dmaven.clover.cloverDatabase="$script_dir/$bug_id/Coverage/$version-Evosuite test coverage/clover.db" \
        -Dsurefire.failIfNoSpecifiedTests=false \
        -Dcheckstyle.skip  \
        -Dmaven.clover.outputDirectory="$script_dir/$bug_id/Coverage/$version-Evosuite test coverage/" \
        -Dtest=$result -Dlicense.skip=true clover:setup test clover:aggregate clover:clover || handle_failure "clover run" $bug_id $version



        cd ..

    done
    
    export_coverage 

    cd ..
    # removing the bug folder
    # rm -rf $bug_id
}

main() {
    # cp ${subjects_dir}/$bug_dataset/projects.txt .

    if [ -e "$bugs_list" ]; then
        while IFS= read -r bug_id <&3; do

            echo "Working on project-$bug_id"

            # generate_evosuite_test_for_bug "$bug_id"

            # build_and_run_for_revealing_test "$bug_id"

            generate_coverage "$bug_id"


            # generate_evosuite_test_for_bug "$bug_id"



            # cd "/Bears/$project_name/Buggy-Version"
            # clean_up
            # build
            # generate_evo_tests
            # run_evo "$project_name" "Patched-Version"
            # instrumented_run_evo "$project_name" "Patched-Version" "Patched-Version" "test_generated_with_fixed_version_running_on_fixed.log"
            # run_evo "$project_name" "Buggy-Version" "Patched-Version" "test_generated_with_fixed_version_running_on_buggy.log"
            # merge_report "$project_name" "Patched-Version"


            echo "Done with project-$bug_id"
        done 3<"$bugs_list"
    else
        echo "File not found: $bugs_list"
    fi
    rm -rf projects.txt

}

# Call main function
main "$@"